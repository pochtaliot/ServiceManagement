@page "/"
@inherits ComponentClasses.HomeComponent
@inject IOptions<ServiceConfig> Config
@rendermode InteractiveServer

<h3 class="text-primary">Service and IIS Manager</h3>

@foreach (var server in servers)
{
    <div class="card my-3">
        <div class="card-header">
            <h4 class="card-title">@server.Alias (@server.Name)</h4>
        </div>
        <div class="card-body">
            <h5 class="text-secondary">Windows Services</h5>
            <table class="table-striped table-hover table table-fixed">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var service in server.Services)
                    {
                        <tr>
                            <td>@service.Name</td>
                            <td>@(service.IsRunning ? "Running" : "Stopped")</td>
                            <td>
                                @if (service.IsRunning)
                                {
                                    <button class="btn btn-danger btn-sm" @onclick="() => StopService(server.Name, service)">Stop</button>
                                }
                                else
                                {
                                    <button class="btn btn-success btn-sm" @onclick="() => StartService(server.Name, service, service.StartupArguments)">Start</button>
                                }
                                <div class="spinner-border margin-left-10 @(PreloadService.WaitingServiceStateChange ? "" : "d-none")" role="status">
                                    <span class="sr-only"></span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <h5 class="text-secondary">IIS App Pools</h5>
            @if (server.AppPools.Any())
            {
                <table class="table-striped table-hover table table-fixed">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appPool in server.AppPools)
                        {
                            <tr>
                                <td>@appPool.Name</td>
                                <td>@(appPool.State == Microsoft.Web.Administration.ObjectState.Started ? "Running" : "Stopped")</td>
                                <td>
                                    @if (appPool.State == Microsoft.Web.Administration.ObjectState.Started)
                                    {
                                        <button class="btn btn-danger btn-sm" @onclick="() => StopAppPool(server, appPool)">Stop</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success btn-sm" @onclick="() => StartAppPool(server, appPool)">Start</button>
                                    }
                                    <div class="spinner-border margin-left-10 @(PreloadService.WaitingAppPoolStateChange ? "" : "d-none")" role="status">
                                        <span class="sr-only"></span>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        servers = Config.Value.Servers;

        foreach (var server in servers)
        {
            foreach (var service in server.Services)
            {
                service.Status = ServiceManager.GetServiceStatusAsync(server.Name, service.Name);
            }

            foreach (var appPool in server.AppPools)
            {
                if (server.Location == ServerLocationType.Remote)
                    appPool.State = RemoteIISManager.GetAppPoolStatusAsync(server.Name, appPool);
                else
                    appPool.State = LocalIISManager.GetAppPoolStatusAsync(appPool);
            }
        }
    }
}
